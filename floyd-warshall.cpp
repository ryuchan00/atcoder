#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
using ll = long long;
using pi = pair<ll, ll>;

int64_t solve(int64_t N, int M, const std::vector<int64_t> &u, const std::vector<int64_t> &v, const std::vector<int64_t> &c) {
  vector<vector<pi>> G(N);
  REP(i, M) {
    // cout << a[i] << " " << b[i] << endl;
    G[u[i]].push_back(make_pair(v[i], c[i]));
  }

  // ヒープかラトリア出したことがあるかを保存する配列
  vector<bool> done(N, false);

  // ヒープを使って書き直す
  priority_queue<pi, vector<pi>, greater<pi>> Q;
  Q.push(make_pair(0, 0));

  // ワーシャルフロイド法(実際には動かない)

  // dist[x][y]に頂点xから頂点yへの最短距離が入るように計算する
  vector<vector<ll>> dist(N, vector<ll>(N));  //-1は未訪問

  // 同じ頂点同士の距離をゼロにする
  REP(i, N) {
    dist[i][i] = 0;
  }

  // ワーシャルフロイド法で，全ての頂点同士について最短距離を計算する
  REP(k, N) {
    REP(x, N) {
      REP(y, N) {
        dist[x][y] = min(dist[x][y], dist[x][k] + dist[k][y]);
      }
    }
  }

  return 1;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int64_t N;
  int M;
  std::cin >> N >> M;
  std::vector<int64_t> u(M), v(M), c(M);
  REP(i, M) {
    std::cin >> u[i] >> v[i] >> c[i];
  }
  auto ans = solve(N, M, u, v, c);
  std::cout << ans << '\n';
  return 0;
}