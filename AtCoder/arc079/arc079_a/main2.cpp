#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
using ll = long long;
typedef pair<int, int> pi;

#define rep(i, n) for (int i = 0; (i) < (n); ++(i))

const std::string YES = "POSSIBLE";
const std::string NO = "IMPOSSIBLE";
bool solve(int64_t N, int M, const std::vector<int64_t> &a, const std::vector<int64_t> &b) {
  // TODO: edit here
  // ヒープを使って書き直す
  // グラフは隣接リストとして保持する
  vector<vector<int>> G(N);
  rep(i, M) {
    // cout << a[i] << " " << b[i] << endl;
    G[a[i] - 1].push_back(b[i] - 1);
    G[b[i] - 1].push_back(a[i] - 1);
  }
  /*
  グラフ上でダイクストラ法を行い頂点0から各頂点への距離を求める
  */
  vector<int> dist(N, -1);  //-1は未訪問

  // 幅優先探索で扱うキュー
  // queue<int> Q;

  // 始点となる頂点には0を入れておく
  // Q.push(0);

  // 始点となる頂点への最短距離は0とする
  dist[0] = 0;

  // 幅優先探索で各頂点への最短距離を求める
  ll i;

  // ヒープの設定
  // C++のpairとheapの挙動についてはこちらを参照
  // https://www.geeksforgeeks.org/priority-queue-of-pairs-in-c-ordered-by-first/
  // vector<pi> v = {make_pair(0, 0)};
  priority_queue<pi, vector<pi>, greater<pi>> Q;
  Q.push(make_pair(0, 0));

  // 要素を追加してヒープ化
  pair<int, int> top;
  while (Q.size() > 0) {
    // キューの先頭の頂点を取り出してiとする
    top = Q.top();
    Q.pop();
    ll d = top.first;
    ll i = top.second;
    // 頂点に隣接してい頂点を順番に見る
    // 見ている頂点をjとする
    for (const auto &j : G[i]) {
      // rep(j, G[i].size()) {
      // 重みは常に1
      int x = 1;
      // jが未訪問だったとき
      if (dist[j] == -1 || dist[j] > dist[i] + x) {
        dist[j] = dist[i] + 1;
        Q.push(make_pair(dist[j], j));
      }
    }
  }

  if (dist[N - 1] == 2) {
    return true;
  } else {
    return false;
  }
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  //   std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int64_t N;
  int M;
  std::cin >> N >> M;
  std::vector<int64_t> a(M), b(M);
  REP(i, M) {
    std::cin >> a[i] >> b[i];
  }
  auto ans = solve(N, M, a, b);
  std::cout << (ans ? YES : NO) << '\n';
  return 0;
}