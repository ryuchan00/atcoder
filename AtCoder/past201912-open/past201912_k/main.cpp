#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
using ll = long long;
using pi = pair<ll, ll>;

const std::string YES = "Yes";
const std::string NO = "No";

vector<vector<pi>> queries;
vector<bool> ans;
vector<bool> boss;
vector<vector<ll>> edges;
ll R = -1;

void dfs(ll i) {
    for (const auto &q : queries[i]) {
        ans[q.first] = boss[q.second];
    }
    // 自分を上司に設定
    boss[i] = true;
    // 再帰的に子供を見る
    for (const auto &j : edges[i]) {
        dfs(j);
    }
    // 抜けるときに自分を上司から外す
    boss[i] = false;
}

auto solve(int N, const std::vector<int64_t> &p, int Q, const std::vector<int64_t> &a, const std::vector<int64_t> &b) {
    // root
    edges.resize(N);

    REP(i, N) {
        if (p[i] == -1) {
            R = i;
        } else {
            edges[p[i] - 1].push_back(i);
        }
    }

    // REP(i,N) {
    //     cout << i << ": ";
    //     REP(j,edges[i].size()) {
    //         cout << edges[i][j] << " ";
    //     }
    //     cout << endl;
    // }

    // cout << "Q:" << Q << endl;
    // queries.resize(Q, vector<pi>());
    REP(i, N) {
        queries.push_back(vector<pi>());
    }
    // cout << "queries.size():" << queries.size() << endl;
    REP(q, Q) {
        // cout << "q:" << q << endl;
        // cout << "a[q]:" << a[q] << endl;
        // cout << "b[q]:" << b[q] << endl;
        // queries[(a[q] - (ll)1)].push_back(make_pair((ll)q, (b[q] - (ll)1)));
        pi p = make_pair((ll)q, (b[q] - (ll)1));
        queries[(a[q] - (ll)1)].push_back(p);
        // cout << p.first << "," << p.second << endl;
        // queries[5].push_back(p);
        // queries[0].push_back(p);
    }
    // cout << "queries:" << endl;

    // REP(i, Q) {
    //     cout << i << ": ";
    //     REP(j, queries[i].size()) {
    //         cout << "(" << queries[i][j].first << "," << queries[i][j].second << ")"
    //              << " ";
    //     }
    //     cout << endl;
    // }

    ans.resize(Q, false);
    boss.resize(N, false);

    dfs(R);

    REP(q, Q) {
        if (ans[q]) {
            cout << YES << endl;
        } else {
            cout << NO << endl;
        }
    }
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    ll N, Q;
    std::cin >> N;
    std::vector<int64_t> p(N);
    REP(i, N) {
        std::cin >> p[i];
    }
    std::cin >> Q;
    std::vector<int64_t> a(Q), b(Q);
    REP(i, Q) {
        std::cin >> a[i] >> b[i];
    }
    solve(N, p, Q, a, b);
    return 0;
}
