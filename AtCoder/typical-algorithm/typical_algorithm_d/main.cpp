#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
using ll = long long;
using pi = pair<ll, ll>;

int64_t solve(int64_t N, int M, const std::vector<int64_t> &u, const std::vector<int64_t> &v, const std::vector<int64_t> &c) {
  vector<vector<pi>> G(N);
  REP(i, M) {
    // cout << a[i] << " " << b[i] << endl;
    G[u[i]].push_back(make_pair(v[i], c[i]));
  }

//   REP(i, M) {
//     REP(j, G[i].size()) {
//       cout << G[i][j].first << " " << G[i][j].second << endl;
//     }
//   }

  vector<ll> dist(N, -1);  //-1は未訪問
  // 始点となる頂点への最短距離は0とする
  dist[0] = 0;

  // ヒープかラトリア出したことがあるかを保存する配列
  vector<bool> done(N, false);

  // ヒープを使って書き直す
  priority_queue<pi, vector<pi>, greater<pi>> Q;
  Q.push(make_pair(0, 0));

  // 要素を追加してヒープ化
  pair<ll, ll> top;
  while (Q.size() > 0) {
    // キューの先頭の頂点を取り出してiとする
    top = Q.top();
    Q.pop();
    ll d = top.first;
    ll i = top.second;

    if (done[i]) continue;
    done[i] = true;

    // 頂点に隣接してい頂点を順番に見る
    // 見ている頂点をjとする
    for (const auto &g : G[i]) {
      // rep(j, G[i].size()) {
      ll j = g.first;
      ll c = g.second;
      //   cout << v[i] << " " << j << " " << c << endl;
      // 重みは常に1
      // jが未訪問だったとき
      if (dist[j] == -1 || dist[j] > dist[i] + c) {
        dist[j] = dist[i] + c;
        Q.push(make_pair(dist[j], j));
      }
    }
  }
  return dist[N - 1];
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int64_t N;
  int M;
  std::cin >> N >> M;
  std::vector<int64_t> u(M), v(M), c(M);
  REP(i, M) {
    std::cin >> u[i] >> v[i] >> c[i];
  }
  auto ans = solve(N, M, u, v, c);
  std::cout << ans << '\n';
  return 0;
}