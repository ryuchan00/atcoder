#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
using ll = long long;
using pi = pair<ll, ll>;

int64_t solve(int64_t N, int M, const std::vector<int64_t> &u, const std::vector<int64_t> &v, const std::vector<int64_t> &c) {
    // ∞を表す定数として非常に大きい数を用意しておく
    const ll INF = 1LL << 60;

    // 全ての頂点の組についての最短距離を管理する2次元配列
    // 最初は辺が1本も張られていないので，∞の辺が貼られているとして
    // N*N個のINFで埋めておく
    vector<vector<ll>> dist(N, vector<ll>(N, INF));

    // グラフの辺を受け取り，distに直接書き込む
    REP(i, M) {
        dist[u[i]][v[i]] = c[i];
    }

    // iからiへの同じ頂点同士の距離は0とする
    REP(i, N) {
        dist[i][i] = 0;
    }

    // ワーシャルフロイド法
    REP(k, N) {
        REP(x, N) {
            REP(y, N) {
                dist[x][y] = min(dist[x][y], dist[x][k] + dist[k][y]);
            }
        }
    }

    // 全ての頂点の組について最短距離を合計する
    ll ans = 0;
    REP(i, N) {
        REP(j, N) {
            ans += dist[i][j];
        }
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t N;
    int M;
    std::cin >> N >> M;
    std::vector<int64_t> u(M), v(M), c(M);
    REP(i, M) {
        std::cin >> u[i] >> v[i] >> c[i];
    }
    auto ans = solve(N, M, u, v, c);
    std::cout << ans << '\n';
    return 0;
}