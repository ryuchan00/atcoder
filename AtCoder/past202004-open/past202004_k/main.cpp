#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
using ll = long long;
using pi = pair<int, int>;

const ll INF = 1e18;

int64_t solve(int N, std::string S, const std::vector<int64_t> &C, const std::vector<int64_t> &D) {
    // cost[i][j]:i文字目までの扱いを決めて
    // そこまでの累積和がjであるときのコスト最小値
    vector<vector<ll>> cost(N + 1, vector<ll>(N + 1, INF));
    cost[0][0] = 0;

    REP(i, N + 1) {
        REP(j, i) {
            if (S[i] == '(') {
                // そのまま使う
                cost[i][j + 1] = min(cost[i][j + 1], cost[i - 1][j]);
                // 反転させる
                if (j > 0) {
                    cost[i][j - 1] = min(cost[i][j - 1], cost[i - 1][j] + C[i]);
                }
            } else {
                // そのまま使う
                if (j > 0) {
                    cost[i][j - 1] = min(cost[i][j - 1], cost[i - 1][j]);
                }
                // 反転させる
                cost[i][j + 1] = min(cost[i][j + 1], cost[i - 1][j] + C[i]);
            }
            // 削除する
            cost[i][j] = min(cost[i][j], cost[i - 1][j] + D[i]);
        }
    }
    return cost[N][0];
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::string S;
    std::cin >> N;
    std::vector<int64_t> C(N), D(N);
    std::cin >> S;
    REP(i, N) {
        std::cin >> C[i];
    }
    REP(i, N) {
        std::cin >> D[i];
    }
    S = " " + S;
    C.insert(C.begin(), 0);
    D.insert(D.begin(), 0);

    auto ans = solve(N, S, C, D);
    std::cout << ans << '\n';
    return 0;
}
