#include <bits/stdc++.h>

#include <vector>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
using ll = long long;
using pi = pair<ll, ll>;

ll solve(ll Q, const std::vector<vector<string>>& Query) {
    vector<string> alphabets = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"};

    queue<pair<string, ll>> que;
    string c;
    ll x;
    ll d;
    REP(q, Q) {
        if (Query[q][0] == "1") {
            c = Query[q][1];
            x = stoi(Query[q][2]);
            que.push(make_pair(c, x));
        } else if (Query[q][0] == "2") {
            d = stoi(Query[q][1]);
            vector<ll> cnt(alphabets.size(), 0);
            while (d > 0 && que.size() > 0) {
                pair<string, ll> p = que.front();
                c = p.first;
                x = p.second;
                vector<string>::iterator itr = find(alphabets.begin(), alphabets.end(), c);
                ll cc = distance(alphabets.begin(), itr);
                if (d >= x) {
                    // 全部とれる
                    d -= x;
                    cnt[cc] += x;
                    que.pop();
                } else {
                    // 途中で切れる
                    cnt[cc] += d;
                    que.front().second -= d;
                    d = 0;
                }
            }
            ll ans = 0;
            REP(i, alphabets.size()) {
                ans += pow(cnt[i], 2);
            }
            cout << ans << endl;
        }
    }
    return 0;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    ll Q;
    std::cin >> Q;
    vector<vector<string>> Query(Q, vector<string>(3));
    REP(i, Q) {
        std::cin >> Query[i][0];
        if (Query[i][0] == "1") {
            std::cin >> Query[i][1] >> Query[i][2];
        } else {
            std::cin >> Query[i][1];
        }
    }
    solve(Q, Query);
    // failed to analyze output format
    // TODO: edit here
    // std::cout << ans << '\n';
    // return 0;
}
