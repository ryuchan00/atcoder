#include <bits/stdc++.h>
#define REP(i, n) for (long long i = 0; (i) < (long long)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
using ll = long long;
using pi = pair<int, int>;

int64_t solve(int N, int64_t W, const std::vector<int64_t> &w, const std::vector<int64_t> &v) {
    // value[i][v]:品物iまで見て価値合計vであるときの重さの総和の最大値
    ll sum = 0;
    REP(i, N + 1) {
        sum += v[i];
    }
    vector<vector<ll>> weight(N + 1, vector<ll>(sum + 1, 2 * 1e18));
    // 初期条件
    weight[0][0] = 0;
    ll max_v = 0;
    for (ll i = 1; i < N + 1; ++i) {
        REP(j, sum + 1) {  // jは価値の合計
            // 品物iを使わない場合
            weight[i][j] = min(weight[i][j], weight[i - 1][j]);
            // 品物iを使う場合
            if (j - v[i] >= 0 && weight[i - 1][j - v[i]] + w[i] <= W) {
                weight[i][j] = min(weight[i][j], weight[i - 1][j - v[i]] + w[i]);
            }
        }
    }
    // REP(i, N + 1) {
    //     REP(j, sum + 1) {
    //         cout << weight[i][j] << " ";
    //     }
    //     cout << endl;
    // }
    // auto it = max_element(weight[N].begin(), weight[N].end());
    REP(i, sum + 1) {
        if (weight[N][i] <= W)
            max_v = max(max_v, i);
    }
    return max_v;

    // vector<vector<ll>> value(N + 1, vector<ll>(W + 1, 0));

    // // 初期条件
    // value[0][0] = 0;

    // // iが小さい順に求めていく
    // for (ll i = 1; i < N + 1; ++i) {
    //     REP(j, W + 1) {
    //         // 品物iを使わない場合
    //         value[i][j] = max(value[i][j], value[i - 1][j]);
    //         // 品物iを使う場合
    //         if (j - w[i] >= 0) {
    //             value[i][j] = max(value[i][j], value[i - 1][j - w[i]] + v[i]);
    //         }
    //     }
    // }
    // auto it = max_element(value[N].begin(), value[N].end());
    // return *it;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    int64_t W;
    std::cin >> N;
    std::vector<int64_t> w(N + 1), v(N + 1);
    w[0] = 0;
    v[0] = 0;
    std::cin >> W;
    REP(i, N) {
        std::cin >> w[i + 1] >> v[i + 1];
    }
    auto ans = solve(N, W, w, v);
    std::cout << ans << '\n';
    return 0;
}
