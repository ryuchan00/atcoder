#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
using ll = long long;
using pi = pair<int, int>;

int64_t solve(int N, int64_t K, const std::vector<int64_t> &h) {
    // cost[i]:足場iにたどり着くまでの最小コスト
    vector<ll> cost(N, 1e16);

    // 初期条件
    cost[0] = 0;
    // 2つめの足場はジャンプ元が1通り
    cost[1] = abs(h[0] - h[1]);
    // それ以降の足場はコストが低い方を採用する
    for (int i = 2; i < N; i++) {
        for (int j = 1; j <= K; j++) {
            if (i - j < 0) break;
            cost[i] = min(cost[i - j] + abs(h[i - j] - h[i]), cost[i]);
        }
    }
    // REP(i, N)
    //     cout << cost[i] << endl;

    return cost[N - 1];
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    int64_t K;
    std::cin >> N;
    std::vector<int64_t> h(N);
    std::cin >> K;
    REP(i, N) {
        std::cin >> h[i];
    }
    auto ans = solve(N, K, h);
    std::cout << ans << '\n';
    return 0;
}
