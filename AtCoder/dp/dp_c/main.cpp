#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
using ll = long long;
using pi = pair<int, int>;

int64_t solve(int N, const std::vector<int64_t> &a, const std::vector<int64_t> &b, const std::vector<int64_t> &c) {
    vector<vector<ll>> cost(N + 1, vector<ll>(3, 0));

    cost[0][0] = 0;
    cost[0][1] = 0;
    cost[0][2] = 0;

    REP(i, N) {
        cost[i + 1][0] = max(cost[i][1] + a[i], cost[i][2] + a[i]);
        cost[i + 1][1] = max(cost[i][0] + b[i], cost[i][2] + b[i]);
        cost[i + 1][2] = max(cost[i][0] + c[i], cost[i][1] + c[i]);
    }
    return max({cost[N][0], cost[N][1], cost[N][2]});
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<int64_t> a(N), b(N), c(N);
    REP(i, N) {
        std::cin >> a[i] >> b[i] >> c[i];
    }
    auto ans = solve(N, a, b, c);
    std::cout << ans << '\n';
    return 0;
}
